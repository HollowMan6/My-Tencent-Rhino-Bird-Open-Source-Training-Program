<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >allocation-tlab secp256r1_1024K-Throughput</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call:475 (16,242 samples, 96.98%)</title><rect x="10.0" y="469" width="1144.3" height="15.0" fill="rgb(209,61,1)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call:475</text>
</g>
<g >
<title>java.lang.reflect.Method.invoke:566 (16,242 samples, 96.98%)</title><rect x="10.0" y="453" width="1144.3" height="15.0" fill="rgb(250,23,15)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >java.lang.reflect.Method.invoke:566</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.engineVerify:489 (522 samples, 3.12%)</title><rect x="563.2" y="293" width="36.8" height="15.0" fill="rgb(229,163,44)" rx="2" ry="2" />
<text  x="566.22" y="303.5" >sun..</text>
</g>
<g >
<title>sun.security.util.DerInputBuffer.getBigInteger:155 (524 samples, 3.13%)</title><rect x="858.7" y="245" width="36.9" height="15.0" fill="rgb(212,220,14)" rx="2" ry="2" />
<text  x="861.72" y="255.5" >sun..</text>
</g>
<g >
<title>org.sample.DigitalSignature.verify:39 (9,438 samples, 56.35%)</title><rect x="489.4" y="341" width="664.9" height="15.0" fill="rgb(244,148,14)" rx="2" ry="2" />
<text  x="492.38" y="351.5" >org.sample.DigitalSignature.verify:39</text>
</g>
<g >
<title>java.lang.reflect.Constructor.newInstance:490 (3,664 samples, 21.88%)</title><rect x="83.7" y="117" width="258.1" height="15.0" fill="rgb(251,229,50)" rx="2" ry="2" />
<text  x="86.70" y="127.5" >java.lang.reflect.Constructor.newI..</text>
</g>
<g >
<title>sun.security.provider.DigestBase.&lt;init&gt;:86 (522 samples, 3.12%)</title><rect x="120.8" y="37" width="36.7" height="15.0" fill="rgb(233,66,6)" rx="2" ry="2" />
<text  x="123.76" y="47.5" >sun..</text>
</g>
<g >
<title>sun.security.ec.SunEC$ProviderService.newInstance:108 (6,802 samples, 40.61%)</title><rect x="10.0" y="277" width="479.2" height="15.0" fill="rgb(226,221,6)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >sun.security.ec.SunEC$ProviderService.newInstance:108</text>
</g>
<g >
<title>java.security.Security.getImpl:700 (1,048 samples, 6.26%)</title><rect x="489.4" y="229" width="73.8" height="15.0" fill="rgb(249,42,20)" rx="2" ry="2" />
<text  x="492.38" y="239.5" >java.sec..</text>
</g>
<g >
<title>sun.security.provider.SHA2$SHA256.&lt;init&gt;:288 (3,138 samples, 18.74%)</title><rect x="120.8" y="69" width="221.0" height="15.0" fill="rgb(222,216,20)" rx="2" ry="2" />
<text  x="123.76" y="79.5" >sun.security.provider.SHA2$SH..</text>
</g>
<g >
<title>java.util.concurrent.FutureTask.run:264 (16,242 samples, 96.98%)</title><rect x="10.0" y="501" width="1144.3" height="15.0" fill="rgb(254,107,5)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >java.util.concurrent.FutureTask.run:264</text>
</g>
<g >
<title>sun.security.util.DerInputStream.&lt;init&gt;:99 (524 samples, 3.13%)</title><rect x="600.0" y="261" width="36.9" height="15.0" fill="rgb(246,221,48)" rx="2" ry="2" />
<text  x="603.00" y="271.5" >sun..</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:206 (6,804 samples, 40.63%)</title><rect x="10.0" y="309" width="479.4" height="15.0" fill="rgb(239,110,4)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >sun.security.jca.GetInstance.getInstance:206</text>
</g>
<g >
<title>java.util.concurrent.ThreadPoolExecutor$Worker.run:628 (16,242 samples, 96.98%)</title><rect x="10.0" y="565" width="1144.3" height="15.0" fill="rgb(208,12,31)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >java.util.concurrent.ThreadPoolExecutor$Worker.run:628</text>
</g>
<g >
<title>sun.security.util.DerInputStream.init:136 (524 samples, 3.13%)</title><rect x="600.0" y="245" width="36.9" height="15.0" fill="rgb(227,43,24)" rx="2" ry="2" />
<text  x="603.00" y="255.5" >sun..</text>
</g>
<g >
<title>java.security.MessageDigest.getInstance:178 (6,802 samples, 40.61%)</title><rect x="10.0" y="213" width="479.2" height="15.0" fill="rgb(206,21,23)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >java.security.MessageDigest.getInstance:178</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:238 (2 samples, 0.01%)</title><rect x="563.1" y="197" width="0.1" height="15.0" fill="rgb(218,31,54)" rx="2" ry="2" />
<text  x="566.08" y="207.5" ></text>
</g>
<g >
<title>jdk.internal.reflect.ReflectionFactory.copyConstructor:388 (524 samples, 3.13%)</title><rect x="46.8" y="101" width="36.9" height="15.0" fill="rgb(213,14,1)" rx="2" ry="2" />
<text  x="49.78" y="111.5" >jdk..</text>
</g>
<g >
<title>sun.security.util.DerInputStream.getSequence:334 (3,148 samples, 18.80%)</title><rect x="636.9" y="261" width="221.8" height="15.0" fill="rgb(212,158,19)" rx="2" ry="2" />
<text  x="639.92" y="271.5" >sun.security.util.DerInputStr..</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getService:85 (2 samples, 0.01%)</title><rect x="489.2" y="293" width="0.2" height="15.0" fill="rgb(226,15,47)" rx="2" ry="2" />
<text  x="492.24" y="303.5" ></text>
</g>
<g >
<title>sun.security.util.ECUtil.getECParameters:133 (1,048 samples, 6.26%)</title><rect x="489.4" y="261" width="73.8" height="15.0" fill="rgb(244,61,42)" rx="2" ry="2" />
<text  x="492.38" y="271.5" >sun.secu..</text>
</g>
<g >
<title>sun.security.util.DerInputBuffer.getBigInteger:166 (2 samples, 0.01%)</title><rect x="932.7" y="245" width="0.1" height="15.0" fill="rgb(217,109,35)" rx="2" ry="2" />
<text  x="935.69" y="255.5" ></text>
</g>
<g >
<title>sun.security.jca.GetInstance$Instance.toArray:60 (524 samples, 3.13%)</title><rect x="489.4" y="213" width="36.9" height="15.0" fill="rgb(215,64,16)" rx="2" ry="2" />
<text  x="492.38" y="223.5" >sun..</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:238 (2,092 samples, 12.49%)</title><rect x="341.8" y="165" width="147.4" height="15.0" fill="rgb(250,2,44)" rx="2" ry="2" />
<text  x="344.85" y="175.5" >sun.security.jca.G..</text>
</g>
<g >
<title>java.util.concurrent.Executors$RunnableAdapter.call:515 (16,242 samples, 96.98%)</title><rect x="10.0" y="517" width="1144.3" height="15.0" fill="rgb(219,70,53)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >java.util.concurrent.Executors$RunnableAdapter.call:515</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:286 (1,572 samples, 9.39%)</title><rect x="1043.6" y="277" width="110.7" height="15.0" fill="rgb(212,65,13)" rx="2" ry="2" />
<text  x="1046.59" y="287.5" >sun.security...</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.engineVerify:498 (7,868 samples, 46.98%)</title><rect x="600.0" y="293" width="554.3" height="15.0" fill="rgb(213,43,21)" rx="2" ry="2" />
<text  x="603.00" y="303.5" >sun.security.ec.ECDSASignature.engineVerify:498</text>
</g>
<g >
<title>jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke:43 (16,242 samples, 96.98%)</title><rect x="10.0" y="437" width="1144.3" height="15.0" fill="rgb(248,51,50)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke:43</text>
</g>
<g >
<title>java.security.Security.getImpl:700 (6,802 samples, 40.61%)</title><rect x="10.0" y="197" width="479.2" height="15.0" fill="rgb(239,162,51)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >java.security.Security.getImpl:700</text>
</g>
<g >
<title>jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance:45 (3,664 samples, 21.88%)</title><rect x="83.7" y="101" width="258.1" height="15.0" fill="rgb(232,218,8)" rx="2" ry="2" />
<text  x="86.70" y="111.5" >jdk.internal.reflect.DelegatingCon..</text>
</g>
<g >
<title>jdk.internal.reflect.GeneratedConstructorAccessor1.newInstance:-1 (3,664 samples, 21.88%)</title><rect x="83.7" y="85" width="258.1" height="15.0" fill="rgb(225,200,25)" rx="2" ry="2" />
<text  x="86.70" y="95.5" >jdk.internal.reflect.GeneratedCons..</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature$SHA256.&lt;init&gt;:242 (6,802 samples, 40.61%)</title><rect x="10.0" y="261" width="479.2" height="15.0" fill="rgb(230,166,35)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >sun.security.ec.ECDSASignature$SHA256.&lt;init&gt;:242</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:164 (6,802 samples, 40.61%)</title><rect x="10.0" y="181" width="479.2" height="15.0" fill="rgb(251,68,15)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >sun.security.jca.GetInstance.getInstance:164</text>
</g>
<g >
<title>java.lang.reflect.ReflectAccess.copyConstructor:155 (524 samples, 3.13%)</title><rect x="46.8" y="85" width="36.9" height="15.0" fill="rgb(244,68,12)" rx="2" ry="2" />
<text  x="49.78" y="95.5" >jav..</text>
</g>
<g >
<title>sun.security.util.DerInputStream.readVector:427 (3,148 samples, 18.80%)</title><rect x="636.9" y="245" width="221.8" height="15.0" fill="rgb(207,211,34)" rx="2" ry="2" />
<text  x="639.92" y="255.5" >sun.security.util.DerInputStr..</text>
</g>
<g >
<title>sun.security.util.IOUtils.readExactlyNBytes:59 (1,054 samples, 6.29%)</title><rect x="784.5" y="197" width="74.2" height="15.0" fill="rgb(227,184,54)" rx="2" ry="2" />
<text  x="787.45" y="207.5" >sun.secu..</text>
</g>
<g >
<title>java.lang.Class.getConstructor:2150 (524 samples, 3.13%)</title><rect x="46.8" y="117" width="36.9" height="15.0" fill="rgb(221,217,53)" rx="2" ry="2" />
<text  x="49.78" y="127.5" >jav..</text>
</g>
<g >
<title>sun.security.util.DerValue.init:411 (1,054 samples, 6.29%)</title><rect x="784.5" y="213" width="74.2" height="15.0" fill="rgb(233,47,26)" rx="2" ry="2" />
<text  x="787.45" y="223.5" >sun.secu..</text>
</g>
<g >
<title>java.math.BigInteger.toByteArray:4119 (1,046 samples, 6.25%)</title><rect x="932.8" y="261" width="73.7" height="15.0" fill="rgb(224,181,1)" rx="2" ry="2" />
<text  x="935.83" y="271.5" >java.mat..</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:282 (1,572 samples, 9.39%)</title><rect x="932.8" y="277" width="110.8" height="15.0" fill="rgb(226,153,17)" rx="2" ry="2" />
<text  x="935.83" y="287.5" >sun.security...</text>
</g>
<g >
<title>java.lang.String.toUpperCase:2584 (2 samples, 0.01%)</title><rect x="489.2" y="245" width="0.2" height="15.0" fill="rgb(246,220,49)" rx="2" ry="2" />
<text  x="492.24" y="255.5" ></text>
</g>
<g >
<title>org.sample.jmh_generated.BenchmarkVerifying_secp256r1_1024K_jmhTest.secp256r1_1024K_Throughput:83 (16,242 samples, 96.98%)</title><rect x="10.0" y="389" width="1144.3" height="15.0" fill="rgb(225,7,17)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >org.sample.jmh_generated.BenchmarkVerifying_secp256r1_1024K_jmhTest.secp256r1_1024K_Throughput:83</text>
</g>
<g >
<title>java.lang.StringLatin1.toUpperCase:472 (2 samples, 0.01%)</title><rect x="489.2" y="229" width="0.2" height="15.0" fill="rgb(217,179,5)" rx="2" ry="2" />
<text  x="492.24" y="239.5" ></text>
</g>
<g >
<title>java.lang.reflect.Constructor.copy:150 (524 samples, 3.13%)</title><rect x="46.8" y="69" width="36.9" height="15.0" fill="rgb(217,36,36)" rx="2" ry="2" />
<text  x="49.78" y="79.5" >jav..</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:278 (526 samples, 3.14%)</title><rect x="858.7" y="277" width="37.1" height="15.0" fill="rgb(224,124,33)" rx="2" ry="2" />
<text  x="861.72" y="287.5" >sun..</text>
</g>
<g >
<title>jdk.internal.reflect.NativeMethodAccessorImpl.invoke:62 (16,242 samples, 96.98%)</title><rect x="10.0" y="421" width="1144.3" height="15.0" fill="rgb(213,227,27)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >jdk.internal.reflect.NativeMethodAccessorImpl.invoke:62</text>
</g>
<g >
<title>sun.security.ec.ECPublicKeyImpl.getEncodedPublicValue:93 (522 samples, 3.12%)</title><rect x="563.2" y="277" width="36.8" height="15.0" fill="rgb(244,82,24)" rx="2" ry="2" />
<text  x="566.22" y="287.5" >sun..</text>
</g>
<g >
<title>java.security.Signature.getInstance:404 (6,804 samples, 40.63%)</title><rect x="10.0" y="325" width="479.4" height="15.0" fill="rgb(215,131,54)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >java.security.Signature.getInstance:404</text>
</g>
<g >
<title>java.security.Provider.getService:1299 (2 samples, 0.01%)</title><rect x="489.2" y="277" width="0.2" height="15.0" fill="rgb(226,206,29)" rx="2" ry="2" />
<text  x="492.24" y="287.5" ></text>
</g>
<g >
<title>java.security.Signature$Delegate.engineVerify:1414 (9,438 samples, 56.35%)</title><rect x="489.4" y="309" width="664.9" height="15.0" fill="rgb(218,121,44)" rx="2" ry="2" />
<text  x="492.38" y="319.5" >java.security.Signature$Delegate.engineVerify:1414</text>
</g>
<g >
<title>jdk.internal.reflect.NativeMethodAccessorImpl.invoke0:-1 (16,242 samples, 96.98%)</title><rect x="10.0" y="405" width="1144.3" height="15.0" fill="rgb(206,52,43)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >jdk.internal.reflect.NativeMethodAccessorImpl.invoke0:-1</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:236 (4,710 samples, 28.12%)</title><rect x="10.0" y="165" width="331.8" height="15.0" fill="rgb(225,57,49)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >sun.security.jca.GetInstance.getInstance:236</text>
</g>
<g >
<title>java.security.AlgorithmParameters.getInstance:158 (1,048 samples, 6.26%)</title><rect x="489.4" y="245" width="73.8" height="15.0" fill="rgb(224,140,19)" rx="2" ry="2" />
<text  x="492.38" y="255.5" >java.sec..</text>
</g>
<g >
<title>sun.security.util.DerInputBuffer.getBigInteger:166 (2 samples, 0.01%)</title><rect x="895.6" y="245" width="0.2" height="15.0" fill="rgb(249,155,6)" rx="2" ry="2" />
<text  x="898.63" y="255.5" ></text>
</g>
<g >
<title>org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call:458 (16,242 samples, 96.98%)</title><rect x="10.0" y="485" width="1144.3" height="15.0" fill="rgb(226,228,13)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call:458</text>
</g>
<g >
<title>sun.security.provider.SHA2.&lt;init&gt;:83 (522 samples, 3.12%)</title><rect x="120.8" y="53" width="36.7" height="15.0" fill="rgb(206,41,35)" rx="2" ry="2" />
<text  x="123.76" y="63.5" >sun..</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.engineVerify:486 (1,048 samples, 6.26%)</title><rect x="489.4" y="293" width="73.8" height="15.0" fill="rgb(224,63,20)" rx="2" ry="2" />
<text  x="492.38" y="303.5" >sun.secu..</text>
</g>
<g >
<title>org.sample.DigitalSignature.verify:35 (6,804 samples, 40.63%)</title><rect x="10.0" y="341" width="479.4" height="15.0" fill="rgb(214,10,1)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >org.sample.DigitalSignature.verify:35</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:270 (3,148 samples, 18.80%)</title><rect x="636.9" y="277" width="221.8" height="15.0" fill="rgb(210,188,13)" rx="2" ry="2" />
<text  x="639.92" y="287.5" >sun.security.util.ECUtil.deco..</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.&lt;init&gt;:118 (6,802 samples, 40.61%)</title><rect x="10.0" y="229" width="479.2" height="15.0" fill="rgb(228,184,3)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >sun.security.ec.ECDSASignature.&lt;init&gt;:118</text>
</g>
<g >
<title>org.sample.jmh_generated.BenchmarkVerifying_secp256r1_1024K_jmhTest.secp256r1_1024K_thrpt_jmhStub:119 (16,242 samples, 96.98%)</title><rect x="10.0" y="373" width="1144.3" height="15.0" fill="rgb(250,206,17)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >org.sample.jmh_generated.BenchmarkVerifying_secp256r1_1024K_jmhTest.secp256r1_1024K_thrpt_jmhStub:119</text>
</g>
<g >
<title>java.security.Provider.newInstanceUtil:154 (3,664 samples, 21.88%)</title><rect x="83.7" y="133" width="258.1" height="15.0" fill="rgb(247,3,24)" rx="2" ry="2" />
<text  x="86.70" y="143.5" >java.security.Provider.newInstance..</text>
</g>
<g >
<title>java.util.Arrays.copyOfRange:4030 (526 samples, 3.14%)</title><rect x="1006.5" y="245" width="37.1" height="15.0" fill="rgb(249,34,24)" rx="2" ry="2" />
<text  x="1009.53" y="255.5" >jav..</text>
</g>
<g >
<title>all (16,748 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(206,196,49)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>sun.security.ec.SunEC$ProviderService.newInstance:131 (522 samples, 3.12%)</title><rect x="526.3" y="181" width="36.8" height="15.0" fill="rgb(233,91,21)" rx="2" ry="2" />
<text  x="529.30" y="191.5" >sun..</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:236 (522 samples, 3.12%)</title><rect x="526.3" y="197" width="36.8" height="15.0" fill="rgb(248,69,37)" rx="2" ry="2" />
<text  x="529.30" y="207.5" >sun..</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:164 (524 samples, 3.13%)</title><rect x="526.3" y="213" width="36.9" height="15.0" fill="rgb(241,84,39)" rx="2" ry="2" />
<text  x="529.30" y="223.5" >sun..</text>
</g>
<g >
<title>sun.security.util.DerValue.&lt;init&gt;:331 (1,054 samples, 6.29%)</title><rect x="784.5" y="229" width="74.2" height="15.0" fill="rgb(214,149,38)" rx="2" ry="2" />
<text  x="787.45" y="239.5" >sun.secu..</text>
</g>
<g >
<title>java.security.Provider$Service.newInstance:1915 (4,710 samples, 28.12%)</title><rect x="10.0" y="149" width="331.8" height="15.0" fill="rgb(230,122,17)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >java.security.Provider$Service.newInstance:1..</text>
</g>
<g >
<title>java.security.Provider.newInstanceUtil:153 (1,046 samples, 6.25%)</title><rect x="10.0" y="133" width="73.7" height="15.0" fill="rgb(246,124,6)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >java.sec..</text>
</g>
<g >
<title>java.security.Provider$ServiceKey.&lt;init&gt;:1103 (2 samples, 0.01%)</title><rect x="489.2" y="261" width="0.2" height="15.0" fill="rgb(230,56,10)" rx="2" ry="2" />
<text  x="492.24" y="271.5" ></text>
</g>
<g >
<title>org.sample.BenchmarkVerifying.secp256r1_1024K:87 (16,242 samples, 96.98%)</title><rect x="10.0" y="357" width="1144.3" height="15.0" fill="rgb(219,118,10)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >org.sample.BenchmarkVerifying.secp256r1_1024K:87</text>
</g>
<g >
<title>java.io.InputStream.readNBytes:392 (1,054 samples, 6.29%)</title><rect x="784.5" y="181" width="74.2" height="15.0" fill="rgb(205,110,27)" rx="2" ry="2" />
<text  x="787.45" y="191.5" >java.io...</text>
</g>
<g >
<title>java.security.Signature.verify:788 (9,438 samples, 56.35%)</title><rect x="489.4" y="325" width="664.9" height="15.0" fill="rgb(233,60,22)" rx="2" ry="2" />
<text  x="492.38" y="335.5" >java.security.Signature.verify:788</text>
</g>
<g >
<title>java.lang.Thread.run:834 (16,242 samples, 96.98%)</title><rect x="10.0" y="581" width="1144.3" height="15.0" fill="rgb(232,35,21)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >java.lang.Thread.run:834</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:236 (6,802 samples, 40.61%)</title><rect x="10.0" y="293" width="479.2" height="15.0" fill="rgb(230,216,44)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >sun.security.jca.GetInstance.getInstance:236</text>
</g>
<g >
<title>sun.security.util.DerValue.getPositiveBigInteger:558 (526 samples, 3.14%)</title><rect x="895.8" y="261" width="37.0" height="15.0" fill="rgb(240,81,29)" rx="2" ry="2" />
<text  x="898.78" y="271.5" >sun..</text>
</g>
<g >
<title>sun.security.util.DerInputBuffer.getBigInteger:155 (524 samples, 3.13%)</title><rect x="895.8" y="245" width="36.9" height="15.0" fill="rgb(246,200,45)" rx="2" ry="2" />
<text  x="898.78" y="255.5" >sun..</text>
</g>
<g >
<title>sun.security.util.DerValue.getPositiveBigInteger:558 (526 samples, 3.14%)</title><rect x="858.7" y="261" width="37.1" height="15.0" fill="rgb(221,53,48)" rx="2" ry="2" />
<text  x="861.72" y="271.5" >sun..</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:269 (524 samples, 3.13%)</title><rect x="600.0" y="277" width="36.9" height="15.0" fill="rgb(242,60,20)" rx="2" ry="2" />
<text  x="603.00" y="287.5" >sun..</text>
</g>
<g >
<title>org.openjdk.jmh.util.InputStreamDrainer.run:77 (506 samples, 3.02%)</title><rect x="1154.3" y="581" width="35.7" height="15.0" fill="rgb(214,86,9)" rx="2" ry="2" />
<text  x="1157.35" y="591.5" >org..</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:279 (526 samples, 3.14%)</title><rect x="895.8" y="277" width="37.0" height="15.0" fill="rgb(244,107,48)" rx="2" ry="2" />
<text  x="898.78" y="287.5" >sun..</text>
</g>
<g >
<title>java.util.concurrent.FutureTask.run:264 (16,242 samples, 96.98%)</title><rect x="10.0" y="533" width="1144.3" height="15.0" fill="rgb(216,4,42)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >java.util.concurrent.FutureTask.run:264</text>
</g>
<g >
<title>sun.security.provider.SHA2.&lt;init&gt;:86 (2,616 samples, 15.62%)</title><rect x="157.5" y="53" width="184.3" height="15.0" fill="rgb(226,155,42)" rx="2" ry="2" />
<text  x="160.54" y="63.5" >sun.security.provider.SH..</text>
</g>
<g >
<title>sun.security.util.ECUtil.trimZeroes:83 (526 samples, 3.14%)</title><rect x="1006.5" y="261" width="37.1" height="15.0" fill="rgb(242,90,4)" rx="2" ry="2" />
<text  x="1009.53" y="271.5" >sun..</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.&lt;init&gt;:106 (6,802 samples, 40.61%)</title><rect x="10.0" y="245" width="479.2" height="15.0" fill="rgb(224,57,37)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >sun.security.ec.ECDSASignature.&lt;init&gt;:106</text>
</g>
<g >
<title>sun.security.util.ECUtil.encodeECParameterSpec:141 (1,048 samples, 6.26%)</title><rect x="489.4" y="277" width="73.8" height="15.0" fill="rgb(238,89,18)" rx="2" ry="2" />
<text  x="492.38" y="287.5" >sun.secu..</text>
</g>
<g >
<title>java.util.concurrent.ThreadPoolExecutor.runWorker:1128 (16,242 samples, 96.98%)</title><rect x="10.0" y="549" width="1144.3" height="15.0" fill="rgb(205,19,10)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >java.util.concurrent.ThreadPoolExecutor.runWorker:1128</text>
</g>
</g>
</svg>
