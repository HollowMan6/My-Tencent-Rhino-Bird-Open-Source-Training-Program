<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="630.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >allocation-tlab secp256k1_128B-Throughput</text>
<text id="details" x="10.00" y="613" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="613" > </text>
<g id="frames">
<g >
<title>jdk.jfr.internal.PlatformRecorder$$Lambda$89.1973932916.run:-1 (244 samples, 0.45%)</title><rect x="1165.3" y="549" width="5.3" height="15.0" fill="rgb(208,68,43)" rx="2" ry="2" />
<text  x="1168.33" y="559.5" ></text>
</g>
<g >
<title>org.sample.jmh_generated.BenchmarkVerifying_secp256k1_128B_jmhTest.secp256k1_128B_Throughput:83 (52,681 samples, 96.95%)</title><rect x="21.4" y="373" width="1143.9" height="15.0" fill="rgb(210,69,24)" rx="2" ry="2" />
<text  x="24.38" y="383.5" >org.sample.jmh_generated.BenchmarkVerifying_secp256k1_128B_jmhTest.secp256k1_128B_Throughput:83</text>
</g>
<g >
<title>java.security.Provider.newInstanceUtil:153 (11,247 samples, 20.70%)</title><rect x="66.8" y="117" width="244.2" height="15.0" fill="rgb(239,117,45)" rx="2" ry="2" />
<text  x="69.76" y="127.5" >java.security.Provider.newInstan..</text>
</g>
<g >
<title>org.sample.BenchmarkVerifying.secp256k1_128B:62 (52,681 samples, 96.95%)</title><rect x="21.4" y="341" width="1143.9" height="15.0" fill="rgb(209,169,15)" rx="2" ry="2" />
<text  x="24.38" y="351.5" >org.sample.BenchmarkVerifying.secp256k1_128B:62</text>
</g>
<g >
<title>java.util.Vector.&lt;init&gt;:155 (524 samples, 0.96%)</title><rect x="596.6" y="213" width="11.4" height="15.0" fill="rgb(231,114,25)" rx="2" ry="2" />
<text  x="599.62" y="223.5" ></text>
</g>
<g >
<title>sun.security.util.ECUtil.getECParameters:133 (542 samples, 1.00%)</title><rect x="573.5" y="245" width="11.7" height="15.0" fill="rgb(235,71,24)" rx="2" ry="2" />
<text  x="576.48" y="255.5" ></text>
</g>
<g >
<title>org.sample.DigitalSignature.verify:35 (25,425 samples, 46.79%)</title><rect x="21.4" y="325" width="552.1" height="15.0" fill="rgb(217,57,34)" rx="2" ry="2" />
<text  x="24.38" y="335.5" >org.sample.DigitalSignature.verify:35</text>
</g>
<g >
<title>sun.security.util.DerInputStream.readVector:423 (524 samples, 0.96%)</title><rect x="596.6" y="229" width="11.4" height="15.0" fill="rgb(219,151,22)" rx="2" ry="2" />
<text  x="599.62" y="239.5" ></text>
</g>
<g >
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos:2119 (522 samples, 0.96%)</title><rect x="1170.6" y="421" width="11.4" height="15.0" fill="rgb(245,147,6)" rx="2" ry="2" />
<text  x="1173.63" y="431.5" ></text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:278 (1,570 samples, 2.89%)</title><rect x="664.9" y="261" width="34.0" height="15.0" fill="rgb(248,128,28)" rx="2" ry="2" />
<text  x="667.85" y="271.5" >su..</text>
</g>
<g >
<title>java.security.Provider$Service.newInstance:1915 (21,241 samples, 39.09%)</title><rect x="66.8" y="133" width="461.2" height="15.0" fill="rgb(207,109,45)" rx="2" ry="2" />
<text  x="69.76" y="143.5" >java.security.Provider$Service.newInstance:1915</text>
</g>
<g >
<title>org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call:475 (52,681 samples, 96.95%)</title><rect x="21.4" y="453" width="1143.9" height="15.0" fill="rgb(234,215,11)" rx="2" ry="2" />
<text  x="24.38" y="463.5" >org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call:475</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:206 (25,425 samples, 46.79%)</title><rect x="21.4" y="293" width="552.1" height="15.0" fill="rgb(207,149,11)" rx="2" ry="2" />
<text  x="24.38" y="303.5" >sun.security.jca.GetInstance.getInstance:206</text>
</g>
<g >
<title>java.util.concurrent.Executors$RunnableAdapter.call:515 (52,681 samples, 96.95%)</title><rect x="21.4" y="501" width="1143.9" height="15.0" fill="rgb(229,137,40)" rx="2" ry="2" />
<text  x="24.38" y="511.5" >java.util.concurrent.Executors$RunnableAdapter.call:515</text>
</g>
<g >
<title>java.util.concurrent.FutureTask.run:264 (52,681 samples, 96.95%)</title><rect x="21.4" y="485" width="1143.9" height="15.0" fill="rgb(241,190,29)" rx="2" ry="2" />
<text  x="24.38" y="495.5" >java.util.concurrent.FutureTask.run:264</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.&lt;init&gt;:106 (22,809 samples, 41.97%)</title><rect x="32.8" y="229" width="495.2" height="15.0" fill="rgb(215,37,48)" rx="2" ry="2" />
<text  x="35.76" y="239.5" >sun.security.ec.ECDSASignature.&lt;init&gt;:106</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.engineVerify:498 (26,714 samples, 49.16%)</title><rect x="585.2" y="277" width="580.1" height="15.0" fill="rgb(217,157,39)" rx="2" ry="2" />
<text  x="588.24" y="287.5" >sun.security.ec.ECDSASignature.engineVerify:498</text>
</g>
<g >
<title>org.openjdk.jmh.runner.BaseRunner.runBenchmark:233 (522 samples, 0.96%)</title><rect x="1170.6" y="501" width="11.4" height="15.0" fill="rgb(231,66,46)" rx="2" ry="2" />
<text  x="1173.63" y="511.5" ></text>
</g>
<g >
<title>sun.security.util.DerValue.init:411 (524 samples, 0.96%)</title><rect x="619.4" y="197" width="11.4" height="15.0" fill="rgb(219,75,9)" rx="2" ry="2" />
<text  x="622.38" y="207.5" ></text>
</g>
<g >
<title>sun.security.ec.SunEC$ProviderService.newInstance:108 (23,333 samples, 42.94%)</title><rect x="21.4" y="261" width="506.6" height="15.0" fill="rgb(247,108,39)" rx="2" ry="2" />
<text  x="24.38" y="271.5" >sun.security.ec.SunEC$ProviderService.newInstance:108</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:238 (18 samples, 0.03%)</title><rect x="584.9" y="181" width="0.3" height="15.0" fill="rgb(206,85,39)" rx="2" ry="2" />
<text  x="587.85" y="191.5" ></text>
</g>
<g >
<title>sun.security.jca.ProviderList.getService:380 (1,566 samples, 2.88%)</title><rect x="32.8" y="149" width="34.0" height="15.0" fill="rgb(239,88,49)" rx="2" ry="2" />
<text  x="35.76" y="159.5" >su..</text>
</g>
<g >
<title>org.openjdk.jmh.util.InputStreamDrainer.run:77 (370 samples, 0.68%)</title><rect x="1182.0" y="565" width="8.0" height="15.0" fill="rgb(247,37,32)" rx="2" ry="2" />
<text  x="1184.97" y="575.5" ></text>
</g>
<g >
<title>sun.security.util.DerInputStream.readVector:427 (2,618 samples, 4.82%)</title><rect x="608.0" y="229" width="56.9" height="15.0" fill="rgb(253,47,4)" rx="2" ry="2" />
<text  x="611.00" y="239.5" >sun.se..</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.engineVerify:486 (542 samples, 1.00%)</title><rect x="573.5" y="277" width="11.7" height="15.0" fill="rgb(237,213,33)" rx="2" ry="2" />
<text  x="576.48" y="287.5" ></text>
</g>
<g >
<title>sun.security.util.DerInputStream.getSequence:334 (3,142 samples, 5.78%)</title><rect x="596.6" y="245" width="68.3" height="15.0" fill="rgb(223,43,31)" rx="2" ry="2" />
<text  x="599.62" y="255.5" >sun.sec..</text>
</g>
<g >
<title>sun.security.util.ECUtil.trimZeroes:83 (11,006 samples, 20.25%)</title><rect x="880.9" y="245" width="239.0" height="15.0" fill="rgb(251,63,21)" rx="2" ry="2" />
<text  x="883.91" y="255.5" >sun.security.util.ECUtil.trimZe..</text>
</g>
<g >
<title>org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked:75 (522 samples, 0.96%)</title><rect x="1170.6" y="533" width="11.4" height="15.0" fill="rgb(229,68,0)" rx="2" ry="2" />
<text  x="1173.63" y="543.5" ></text>
</g>
<g >
<title>java.math.BigInteger.&lt;init&gt;:432 (2,096 samples, 3.86%)</title><rect x="767.1" y="213" width="45.5" height="15.0" fill="rgb(242,59,19)" rx="2" ry="2" />
<text  x="770.13" y="223.5" >java..</text>
</g>
<g >
<title>java.util.Arrays.copyOfRange:4030 (11,006 samples, 20.25%)</title><rect x="880.9" y="229" width="239.0" height="15.0" fill="rgb(211,92,12)" rx="2" ry="2" />
<text  x="883.91" y="239.5" >java.util.Arrays.copyOfRange:4030</text>
</g>
<g >
<title>java.security.Security.getImpl:700 (22,809 samples, 41.97%)</title><rect x="32.8" y="181" width="495.2" height="15.0" fill="rgb(250,201,29)" rx="2" ry="2" />
<text  x="35.76" y="191.5" >java.security.Security.getImpl:700</text>
</g>
<g >
<title>java.security.Signature.getInstance:404 (25,425 samples, 46.79%)</title><rect x="21.4" y="309" width="552.1" height="15.0" fill="rgb(238,140,52)" rx="2" ry="2" />
<text  x="24.38" y="319.5" >java.security.Signature.getInstance:404</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:164 (21,243 samples, 39.09%)</title><rect x="66.8" y="165" width="461.2" height="15.0" fill="rgb(241,78,21)" rx="2" ry="2" />
<text  x="69.76" y="175.5" >sun.security.jca.GetInstance.getInstance:164</text>
</g>
<g >
<title>jdk.jfr.internal.PlatformRecorder.periodicTask:439 (244 samples, 0.45%)</title><rect x="1165.3" y="517" width="5.3" height="15.0" fill="rgb(234,84,26)" rx="2" ry="2" />
<text  x="1168.33" y="527.5" ></text>
</g>
<g >
<title>org.openjdk.jmh.runner.BaseRunner.doSingle:138 (522 samples, 0.96%)</title><rect x="1170.6" y="517" width="11.4" height="15.0" fill="rgb(227,65,24)" rx="2" ry="2" />
<text  x="1173.63" y="527.5" ></text>
</g>
<g >
<title>org.openjdk.jmh.runner.ForkedMain.main:86 (522 samples, 0.96%)</title><rect x="1170.6" y="565" width="11.4" height="15.0" fill="rgb(208,228,39)" rx="2" ry="2" />
<text  x="1173.63" y="575.5" ></text>
</g>
<g >
<title>java.io.InputStream.readNBytes:392 (524 samples, 0.96%)</title><rect x="619.4" y="165" width="11.4" height="15.0" fill="rgb(213,219,50)" rx="2" ry="2" />
<text  x="622.38" y="175.5" ></text>
</g>
<g >
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer.transferAfterCancelledWait:1742 (522 samples, 0.96%)</title><rect x="1170.6" y="405" width="11.4" height="15.0" fill="rgb(254,26,47)" rx="2" ry="2" />
<text  x="1173.63" y="415.5" ></text>
</g>
<g >
<title>org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call:458 (52,681 samples, 96.95%)</title><rect x="21.4" y="469" width="1143.9" height="15.0" fill="rgb(239,7,42)" rx="2" ry="2" />
<text  x="24.38" y="479.5" >org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call:458</text>
</g>
<g >
<title>jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance:45 (5,278 samples, 9.71%)</title><rect x="413.4" y="85" width="114.6" height="15.0" fill="rgb(213,164,26)" rx="2" ry="2" />
<text  x="416.39" y="95.5" >jdk.internal.r..</text>
</g>
<g >
<title>sun.security.provider.SHA2$SHA256.&lt;init&gt;:288 (4,748 samples, 8.74%)</title><rect x="424.9" y="53" width="103.1" height="15.0" fill="rgb(227,178,41)" rx="2" ry="2" />
<text  x="427.90" y="63.5" >sun.security..</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getService:85 (2,092 samples, 3.85%)</title><rect x="528.0" y="277" width="45.5" height="15.0" fill="rgb(241,123,22)" rx="2" ry="2" />
<text  x="531.05" y="287.5" >sun...</text>
</g>
<g >
<title>java.math.BigInteger.&lt;init&gt;:399 (2,096 samples, 3.86%)</title><rect x="767.1" y="197" width="45.5" height="15.0" fill="rgb(237,223,26)" rx="2" ry="2" />
<text  x="770.13" y="207.5" >java..</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:236 (524 samples, 0.96%)</title><rect x="573.5" y="181" width="11.4" height="15.0" fill="rgb(213,138,23)" rx="2" ry="2" />
<text  x="576.48" y="191.5" ></text>
</g>
<g >
<title>sun.security.util.ECUtil.encodeECParameterSpec:141 (542 samples, 1.00%)</title><rect x="573.5" y="261" width="11.7" height="15.0" fill="rgb(223,145,25)" rx="2" ry="2" />
<text  x="576.48" y="271.5" ></text>
</g>
<g >
<title>jdk.jfr.internal.RequestEngine.doPeriodic:183 (244 samples, 0.45%)</title><rect x="1165.3" y="501" width="5.3" height="15.0" fill="rgb(236,123,19)" rx="2" ry="2" />
<text  x="1168.33" y="511.5" ></text>
</g>
<g >
<title>java.util.concurrent.ThreadPoolExecutor.runWorker:1128 (52,681 samples, 96.95%)</title><rect x="21.4" y="533" width="1143.9" height="15.0" fill="rgb(235,37,18)" rx="2" ry="2" />
<text  x="24.38" y="543.5" >java.util.concurrent.ThreadPoolExecutor.runWorker:1128</text>
</g>
<g >
<title>sun.security.util.DerInputBuffer.getBigInteger:155 (1,046 samples, 1.92%)</title><rect x="664.9" y="229" width="22.7" height="15.0" fill="rgb(242,129,25)" rx="2" ry="2" />
<text  x="667.85" y="239.5" >s..</text>
</g>
<g >
<title>sun.security.ec.SunEC$ProviderService.newInstance:131 (524 samples, 0.96%)</title><rect x="573.5" y="165" width="11.4" height="15.0" fill="rgb(217,226,29)" rx="2" ry="2" />
<text  x="576.48" y="175.5" ></text>
</g>
<g >
<title>java.security.Provider.getService:1299 (1,566 samples, 2.88%)</title><rect x="32.8" y="133" width="34.0" height="15.0" fill="rgb(212,154,39)" rx="2" ry="2" />
<text  x="35.76" y="143.5" >ja..</text>
</g>
<g >
<title>org.openjdk.jmh.runner.ForkedRunner.run:72 (522 samples, 0.96%)</title><rect x="1170.6" y="549" width="11.4" height="15.0" fill="rgb(227,60,0)" rx="2" ry="2" />
<text  x="1173.63" y="559.5" ></text>
</g>
<g >
<title>sun.security.util.IOUtils.readExactlyNBytes:59 (524 samples, 0.96%)</title><rect x="619.4" y="181" width="11.4" height="15.0" fill="rgb(234,135,22)" rx="2" ry="2" />
<text  x="622.38" y="191.5" ></text>
</g>
<g >
<title>jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1:386 (244 samples, 0.45%)</title><rect x="1165.3" y="533" width="5.3" height="15.0" fill="rgb(243,173,9)" rx="2" ry="2" />
<text  x="1168.33" y="543.5" ></text>
</g>
<g >
<title>sun.security.util.DerValue.getPositiveBigInteger:558 (5,236 samples, 9.64%)</title><rect x="698.9" y="245" width="113.7" height="15.0" fill="rgb(220,145,47)" rx="2" ry="2" />
<text  x="701.94" y="255.5" >sun.security.u..</text>
</g>
<g >
<title>org.openjdk.jmh.runner.BaseRunner.runBenchmark:281 (522 samples, 0.96%)</title><rect x="1170.6" y="485" width="11.4" height="15.0" fill="rgb(217,213,21)" rx="2" ry="2" />
<text  x="1173.63" y="495.5" ></text>
</g>
<g >
<title>java.lang.Class.getConstructor:2150 (11,245 samples, 20.69%)</title><rect x="66.8" y="101" width="244.2" height="15.0" fill="rgb(231,214,36)" rx="2" ry="2" />
<text  x="69.81" y="111.5" >java.lang.Class.getConstructor:2..</text>
</g>
<g >
<title>java.lang.Thread.run:834 (52,925 samples, 97.39%)</title><rect x="21.4" y="565" width="1149.2" height="15.0" fill="rgb(229,11,36)" rx="2" ry="2" />
<text  x="24.38" y="575.5" >java.lang.Thread.run:834</text>
</g>
<g >
<title>java.math.BigInteger.toByteArray:4119 (2,618 samples, 4.82%)</title><rect x="824.1" y="245" width="56.8" height="15.0" fill="rgb(247,221,46)" rx="2" ry="2" />
<text  x="827.06" y="255.5" >java.m..</text>
</g>
<g >
<title>java.security.Signature.verify:788 (27,256 samples, 50.16%)</title><rect x="573.5" y="309" width="591.8" height="15.0" fill="rgb(214,0,12)" rx="2" ry="2" />
<text  x="576.48" y="319.5" >java.security.Signature.verify:788</text>
</g>
<g >
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer.enq:639 (522 samples, 0.96%)</title><rect x="1170.6" y="389" width="11.4" height="15.0" fill="rgb(222,69,44)" rx="2" ry="2" />
<text  x="1173.63" y="399.5" ></text>
</g>
<g >
<title>jdk.internal.reflect.NativeMethodAccessorImpl.invoke0:-1 (52,681 samples, 96.95%)</title><rect x="21.4" y="389" width="1143.9" height="15.0" fill="rgb(215,156,21)" rx="2" ry="2" />
<text  x="24.38" y="399.5" >jdk.internal.reflect.NativeMethodAccessorImpl.invoke0:-1</text>
</g>
<g >
<title>sun.security.util.DerInputBuffer.getBigInteger:166 (2,618 samples, 4.82%)</title><rect x="755.8" y="229" width="56.8" height="15.0" fill="rgb(227,199,51)" rx="2" ry="2" />
<text  x="758.79" y="239.5" >sun.se..</text>
</g>
<g >
<title>jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke:43 (52,681 samples, 96.95%)</title><rect x="21.4" y="421" width="1143.9" height="15.0" fill="rgb(220,31,22)" rx="2" ry="2" />
<text  x="24.38" y="431.5" >jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke:43</text>
</g>
<g >
<title>sun.security.provider.SHA2.&lt;init&gt;:86 (4,740 samples, 8.72%)</title><rect x="425.1" y="37" width="102.9" height="15.0" fill="rgb(242,54,39)" rx="2" ry="2" />
<text  x="428.08" y="47.5" >sun.security..</text>
</g>
<g >
<title>jdk.internal.reflect.NativeMethodAccessorImpl.invoke:62 (52,681 samples, 96.95%)</title><rect x="21.4" y="405" width="1143.9" height="15.0" fill="rgb(232,108,49)" rx="2" ry="2" />
<text  x="24.38" y="415.5" >jdk.internal.reflect.NativeMethodAccessorImpl.invoke:62</text>
</g>
<g >
<title>sun.security.provider.SHA2.&lt;init&gt;:85 (8 samples, 0.01%)</title><rect x="424.9" y="37" width="0.2" height="15.0" fill="rgb(219,196,13)" rx="2" ry="2" />
<text  x="427.90" y="47.5" ></text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:164 (542 samples, 1.00%)</title><rect x="573.5" y="197" width="11.7" height="15.0" fill="rgb(216,39,8)" rx="2" ry="2" />
<text  x="576.48" y="207.5" ></text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:236 (21,241 samples, 39.09%)</title><rect x="66.8" y="149" width="461.2" height="15.0" fill="rgb(233,150,21)" rx="2" ry="2" />
<text  x="69.76" y="159.5" >sun.security.jca.GetInstance.getInstance:236</text>
</g>
<g >
<title>java.security.Security.getImpl:700 (542 samples, 1.00%)</title><rect x="573.5" y="213" width="11.7" height="15.0" fill="rgb(217,226,3)" rx="2" ry="2" />
<text  x="576.48" y="223.5" ></text>
</g>
<g >
<title>java.lang.reflect.Constructor.newInstance:490 (5,278 samples, 9.71%)</title><rect x="413.4" y="101" width="114.6" height="15.0" fill="rgb(254,102,10)" rx="2" ry="2" />
<text  x="416.39" y="111.5" >java.lang.refl..</text>
</g>
<g >
<title>java.security.AlgorithmParameters.getInstance:158 (542 samples, 1.00%)</title><rect x="573.5" y="229" width="11.7" height="15.0" fill="rgb(220,161,39)" rx="2" ry="2" />
<text  x="576.48" y="239.5" ></text>
</g>
<g >
<title>sun.security.ec.ECDSASignature$SHA256.&lt;init&gt;:242 (22,809 samples, 41.97%)</title><rect x="32.8" y="245" width="495.2" height="15.0" fill="rgb(225,183,14)" rx="2" ry="2" />
<text  x="35.76" y="255.5" >sun.security.ec.ECDSASignature$SHA256.&lt;init&gt;:242</text>
</g>
<g >
<title>java.util.concurrent.ExecutorCompletionService.poll:209 (522 samples, 0.96%)</title><rect x="1170.6" y="453" width="11.4" height="15.0" fill="rgb(246,127,12)" rx="2" ry="2" />
<text  x="1173.63" y="463.5" ></text>
</g>
<g >
<title>sun.security.util.DerValue.init:413 (524 samples, 0.96%)</title><rect x="630.8" y="197" width="11.3" height="15.0" fill="rgb(210,148,32)" rx="2" ry="2" />
<text  x="633.76" y="207.5" ></text>
</g>
<g >
<title>sun.security.util.DerInputBuffer.getBigInteger:166 (524 samples, 0.96%)</title><rect x="687.6" y="229" width="11.3" height="15.0" fill="rgb(222,38,24)" rx="2" ry="2" />
<text  x="690.56" y="239.5" ></text>
</g>
<g >
<title>java.security.Provider.newInstanceUtil:154 (9,994 samples, 18.39%)</title><rect x="311.0" y="117" width="217.0" height="15.0" fill="rgb(252,136,48)" rx="2" ry="2" />
<text  x="313.99" y="127.5" >java.security.Provider.newIn..</text>
</g>
<g >
<title>java.security.Provider.getService:1299 (2,092 samples, 3.85%)</title><rect x="528.0" y="261" width="45.5" height="15.0" fill="rgb(250,78,41)" rx="2" ry="2" />
<text  x="531.05" y="271.5" >java..</text>
</g>
<g >
<title>java.lang.reflect.ReflectAccess.copyConstructor:155 (11,245 samples, 20.69%)</title><rect x="66.8" y="69" width="244.2" height="15.0" fill="rgb(219,100,36)" rx="2" ry="2" />
<text  x="69.81" y="79.5" >java.lang.reflect.ReflectAccess...</text>
</g>
<g >
<title>all (54,341 samples, 100%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(210,72,19)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>sun.security.util.DerValue.init:414 (1,046 samples, 1.92%)</title><rect x="642.1" y="197" width="22.8" height="15.0" fill="rgb(212,176,38)" rx="2" ry="2" />
<text  x="645.14" y="207.5" >s..</text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:157 (1,566 samples, 2.88%)</title><rect x="32.8" y="165" width="34.0" height="15.0" fill="rgb(207,146,46)" rx="2" ry="2" />
<text  x="35.76" y="175.5" >su..</text>
</g>
<g >
<title>org.sample.jmh_generated.BenchmarkVerifying_secp256k1_128B_jmhTest.secp256k1_128B_thrpt_jmhStub:119 (52,681 samples, 96.95%)</title><rect x="21.4" y="357" width="1143.9" height="15.0" fill="rgb(227,141,15)" rx="2" ry="2" />
<text  x="24.38" y="367.5" >org.sample.jmh_generated.BenchmarkVerifying_secp256k1_128B_jmhTest.secp256k1_128B_thrpt_jmhStub:119</text>
</g>
<g >
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer.initializeSyncQueue:2324 (522 samples, 0.96%)</title><rect x="1170.6" y="373" width="11.4" height="15.0" fill="rgb(254,216,46)" rx="2" ry="2" />
<text  x="1173.63" y="383.5" ></text>
</g>
<g >
<title>org.sample.DigitalSignature.verify:39 (27,256 samples, 50.16%)</title><rect x="573.5" y="325" width="591.8" height="15.0" fill="rgb(242,229,3)" rx="2" ry="2" />
<text  x="576.48" y="335.5" >org.sample.DigitalSignature.verify:39</text>
</g>
<g >
<title>sun.security.util.DerInputBuffer.getBigInteger:155 (2,618 samples, 4.82%)</title><rect x="698.9" y="229" width="56.9" height="15.0" fill="rgb(239,135,22)" rx="2" ry="2" />
<text  x="701.94" y="239.5" >sun.se..</text>
</g>
<g >
<title>jdk.internal.reflect.GeneratedConstructorAccessor1.newInstance:-1 (5,278 samples, 9.71%)</title><rect x="413.4" y="69" width="114.6" height="15.0" fill="rgb(240,22,30)" rx="2" ry="2" />
<text  x="416.39" y="79.5" >jdk.internal.r..</text>
</g>
<g >
<title>jdk.internal.reflect.ReflectionFactory.copyConstructor:388 (11,245 samples, 20.69%)</title><rect x="66.8" y="85" width="244.2" height="15.0" fill="rgb(247,62,0)" rx="2" ry="2" />
<text  x="69.81" y="95.5" >jdk.internal.reflect.ReflectionF..</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:282 (526 samples, 0.97%)</title><rect x="812.6" y="261" width="11.5" height="15.0" fill="rgb(239,34,40)" rx="2" ry="2" />
<text  x="815.64" y="271.5" ></text>
</g>
<g >
<title>sun.security.util.DerValue.&lt;init&gt;:331 (2,094 samples, 3.85%)</title><rect x="619.4" y="213" width="45.5" height="15.0" fill="rgb(235,101,2)" rx="2" ry="2" />
<text  x="622.38" y="223.5" >sun...</text>
</g>
<g >
<title>java.lang.reflect.Constructor.copy:150 (11,245 samples, 20.69%)</title><rect x="66.8" y="53" width="244.2" height="15.0" fill="rgb(222,74,22)" rx="2" ry="2" />
<text  x="69.81" y="63.5" >java.lang.reflect.Constructor.co..</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:286 (2,092 samples, 3.85%)</title><rect x="1119.9" y="261" width="45.4" height="15.0" fill="rgb(211,143,44)" rx="2" ry="2" />
<text  x="1122.90" y="271.5" >sun...</text>
</g>
<g >
<title>java.lang.reflect.Method.invoke:566 (52,681 samples, 96.95%)</title><rect x="21.4" y="437" width="1143.9" height="15.0" fill="rgb(228,27,23)" rx="2" ry="2" />
<text  x="24.38" y="447.5" >java.lang.reflect.Method.invoke:566</text>
</g>
<g >
<title>java.util.Arrays.copyOfRange:4030 (524 samples, 0.96%)</title><rect x="812.7" y="229" width="11.4" height="15.0" fill="rgb(252,224,25)" rx="2" ry="2" />
<text  x="815.68" y="239.5" ></text>
</g>
<g >
<title>jdk.jfr.internal.RequestEngine.run_requests:212 (244 samples, 0.45%)</title><rect x="1165.3" y="485" width="5.3" height="15.0" fill="rgb(224,178,34)" rx="2" ry="2" />
<text  x="1168.33" y="495.5" ></text>
</g>
<g >
<title>java.math.BigInteger.stripLeadingZeroBytes:4398 (2,096 samples, 3.86%)</title><rect x="767.1" y="181" width="45.5" height="15.0" fill="rgb(248,6,38)" rx="2" ry="2" />
<text  x="770.13" y="191.5" >java..</text>
</g>
<g >
<title>java.util.concurrent.ThreadPoolExecutor$Worker.run:628 (52,681 samples, 96.95%)</title><rect x="21.4" y="549" width="1143.9" height="15.0" fill="rgb(246,212,42)" rx="2" ry="2" />
<text  x="24.38" y="559.5" >java.util.concurrent.ThreadPoolExecutor$Worker.run:628</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:269 (524 samples, 0.96%)</title><rect x="585.2" y="261" width="11.4" height="15.0" fill="rgb(234,67,20)" rx="2" ry="2" />
<text  x="588.24" y="271.5" ></text>
</g>
<g >
<title>java.util.Vector.&lt;init&gt;:142 (524 samples, 0.96%)</title><rect x="596.6" y="197" width="11.4" height="15.0" fill="rgb(253,82,11)" rx="2" ry="2" />
<text  x="599.62" y="207.5" ></text>
</g>
<g >
<title>java.util.concurrent.CopyOnWriteArrayList.iterator:1024 (244 samples, 0.45%)</title><rect x="1165.3" y="469" width="5.3" height="15.0" fill="rgb(205,104,27)" rx="2" ry="2" />
<text  x="1168.33" y="479.5" ></text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:270 (3,142 samples, 5.78%)</title><rect x="596.6" y="261" width="68.3" height="15.0" fill="rgb(231,99,25)" rx="2" ry="2" />
<text  x="599.62" y="271.5" >sun.sec..</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:283 (13,624 samples, 25.07%)</title><rect x="824.1" y="261" width="295.8" height="15.0" fill="rgb(225,178,12)" rx="2" ry="2" />
<text  x="827.06" y="271.5" >sun.security.util.ECUtil.decodeSignatur..</text>
</g>
<g >
<title>java.util.concurrent.LinkedBlockingQueue.poll:458 (522 samples, 0.96%)</title><rect x="1170.6" y="437" width="11.4" height="15.0" fill="rgb(209,211,46)" rx="2" ry="2" />
<text  x="1173.63" y="447.5" ></text>
</g>
<g >
<title>sun.security.jca.GetInstance.getInstance:236 (23,333 samples, 42.94%)</title><rect x="21.4" y="277" width="506.6" height="15.0" fill="rgb(215,180,2)" rx="2" ry="2" />
<text  x="24.38" y="287.5" >sun.security.jca.GetInstance.getInstance:236</text>
</g>
<g >
<title>sun.security.ec.ECDSASignature.&lt;init&gt;:118 (22,809 samples, 41.97%)</title><rect x="32.8" y="213" width="495.2" height="15.0" fill="rgb(246,227,12)" rx="2" ry="2" />
<text  x="35.76" y="223.5" >sun.security.ec.ECDSASignature.&lt;init&gt;:118</text>
</g>
<g >
<title>org.openjdk.jmh.runner.BenchmarkHandler.runIteration:344 (522 samples, 0.96%)</title><rect x="1170.6" y="469" width="11.4" height="15.0" fill="rgb(247,225,42)" rx="2" ry="2" />
<text  x="1173.63" y="479.5" ></text>
</g>
<g >
<title>java.util.concurrent.FutureTask.run:264 (52,681 samples, 96.95%)</title><rect x="21.4" y="517" width="1143.9" height="15.0" fill="rgb(219,196,15)" rx="2" ry="2" />
<text  x="24.38" y="527.5" >java.util.concurrent.FutureTask.run:264</text>
</g>
<g >
<title>sun.security.util.ECUtil.trimZeroes:83 (524 samples, 0.96%)</title><rect x="812.7" y="245" width="11.4" height="15.0" fill="rgb(241,137,18)" rx="2" ry="2" />
<text  x="815.68" y="255.5" ></text>
</g>
<g >
<title>java.security.Signature$Delegate.engineVerify:1414 (27,256 samples, 50.16%)</title><rect x="573.5" y="293" width="591.8" height="15.0" fill="rgb(250,225,46)" rx="2" ry="2" />
<text  x="576.48" y="303.5" >java.security.Signature$Delegate.engineVerify:1414</text>
</g>
<g >
<title>sun.security.util.DerValue.getPositiveBigInteger:558 (1,570 samples, 2.89%)</title><rect x="664.9" y="245" width="34.0" height="15.0" fill="rgb(218,88,20)" rx="2" ry="2" />
<text  x="667.85" y="255.5" >su..</text>
</g>
<g >
<title>java.security.MessageDigest.getInstance:178 (22,809 samples, 41.97%)</title><rect x="32.8" y="197" width="495.2" height="15.0" fill="rgb(216,204,36)" rx="2" ry="2" />
<text  x="35.76" y="207.5" >java.security.MessageDigest.getInstance:178</text>
</g>
<g >
<title>sun.security.util.ECUtil.decodeSignature:279 (5,236 samples, 9.64%)</title><rect x="698.9" y="261" width="113.7" height="15.0" fill="rgb(213,74,34)" rx="2" ry="2" />
<text  x="701.94" y="271.5" >sun.security.u..</text>
</g>
</g>
</svg>
